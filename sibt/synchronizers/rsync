#!bash-runner

AdditionalSyncOpts=
RemoteShellCommand=
AdditionalOptsBothWays=
ExcludedDirs=

TimestampFileName=".sibt-rsync-timestamp"

available-options() {
cat <<EOF
AdditionalSyncOpts
AdditionalOptsBothWays
RemoteShellCommand
ExcludedDirs
EOF
}

info-of-port() {
  if [ "$1" = specials ]; then
    echo one-must-be-file
  elif [ "$1" -lt 3 ]; then
    if [ "$1" = 1 ]; then
      echo 0
    else
      echo 1
    fi
    echo file
    echo ssh
  fi
}

get-reanchored-exclude-opts() {
  local excludeAnchor="$1"
  local anchorOneLevelDeeper="$2"
  if [ "$anchorOneLevelDeeper" != 1 ]; then
    excludeAnchor="$(dirname "$excludeAnchor")"
  fi
  declare -n destArray="$3"

  declare -a excludedDirsArray=()
  eval args-to-array excludedDirsArray "$ExcludedDirs"
  
  for excludedDir in "${excludedDirsArray[@]:+${excludedDirsArray[@]}}"; do 
    local normalizedExcludePath="$(echo "$excludedDir" | \
        sed -r -e 's,/+,/,g; s,/\./,/,g; s,/$,,')"
    local numberOfSlashes="$(echo "$excludeAnchor" | sed -e 's/[^/]//g' | \
      wc --bytes)"
    if [ $numberOfSlashes -gt 0 ]; then
      local normalizedExcludePath="${normalizedExcludePath:1}"
      local oldPath="$normalizedExcludePath"
      normalizedExcludePath="${normalizedExcludePath#"${excludeAnchor}"}"
      if [ "$oldPath" = "$normalizedExcludePath" ]; then
        normalizedExcludePath=/"$normalizedExcludePath"
      fi
    fi
    local trailingSlash=/
    destArray+=(--exclude "$normalizedExcludePath""$trailingSlash")
  done
}

run-rsync() {
  local srcLoc="$1"
  local destLoc="$2"
  local remotePort="$4"
  if [ $3 = 1 ]; then
    srcLoc+=/
  fi
  local excludeAnchor="$5"

  declare -a RemoteShellArgs=()
  if [ -n "$RemoteShellCommand" ]; then
    RemoteShellArgs=(--rsh "$(rsh-command-with-socket-port $remotePort)")
  fi

  declare -a addOptsArray=()
  eval args-to-array addOptsArray "$AdditionalOptsBothWays"
  declare -a excludeOptsArray=()
  get-reanchored-exclude-opts "$excludeAnchor" "$3" excludeOptsArray

  rsync --protect-args -a --acls --xattrs "${@:6:$#}" "$srcLoc" "$destLoc" \
    "${RemoteShellArgs[@]:+${RemoteShellArgs[@]}}" \
    "${addOptsArray[@]:+${addOptsArray[@]}}" \
    "${excludeOptsArray[@]:+${excludeOptsArray[@]}}"
}

loc-syntax-of() {
  local path="${2:-$(get-var $1 Path)}"

  if [ "$(get-var $1 Protocol)" = file ]; then
    echo "$path"
    return
  fi

  echo "$(rsh-host-syntax-of $1)"':'"$path"
}

sync() {
  declare -a addOptsArray=()
  eval args-to-array addOptsArray "$AdditionalSyncOpts"

  run-rsync "$(loc-syntax-of Loc1)" "$(loc-syntax-of Loc2)" 1 \
    "$(get-first-rsh-port Loc1 Loc2)" "." --delete \
    "${addOptsArray[@]:+${addOptsArray[@]}}"

  declare -a cmd=(bash -c 'date +%s >"$1"' '' "$Loc2Path"/"$TimestampFileName")
  execute-at-port Loc2 cmd
}

versions-of() {
  path="$1"
  portNumber=$2

  if [ $portNumber = 2 ]; then
    return
  fi

  fullPath="$Loc2Path"/"$path"
  timestampFilePath="$Loc2Path"/"$TimestampFileName"

  declare -a cmd=(bash -c \
    'if [ -e "$2" ]; then { cat "$1" || stat -c%Y "$2"; }; fi 2>/dev/null' \
    '' "$timestampFilePath" "$fullPath")
  execute-at-port Loc2 cmd
}

restore() {
  path="$1"
  restoringToSourceTree=0
  destPort=Restore

  srcPath="$Loc2Path"/"$path"
  srcFileType=$(get-file-type Loc2 "$srcPath")

  if [ -z "$4" ]; then
    restoringToSourceTree=1
    destPath="$Loc1Path"/"$path"
    destPort=Loc1
  else 
    destPath="$RestorePath"
  fi

  declare -a options=()
  withSlash=0

  if [ $restoringToSourceTree = 1 ]; then

    options+=(--delete)

    destPath=$(dirname "$destPath")
    withSlash=0

  else

    destFileType=$(get-file-type "$destPort" "$destPath" follow-links)

    if [ "$destFileType" = missing ] && [ "$srcFileType" = directory ]; then
      withSlash=1
    fi

    if [ "$destFileType" = directory ] && [ "$srcFileType" = directory ]; then
      fileInDest="$destPath"/"$(basename "$srcPath")"
      if [ "$(get-file-type "$destPort" "$fileInDest")" = non-directory ]; then
        print-error "destination contains non-directory "\
"‘$(basename "$srcPath")’, could not make way for source"
        return 1
      fi
    fi

  fi
  
  run-rsync "$(loc-syntax-of Loc2 "$srcPath")" \
    "$(loc-syntax-of "$destPort" "$destPath")" \
    "$withSlash" "$(get-first-rsh-port "$destPort" Loc2)" "$path" \
    "${options[@]:+${options[@]}}"
}

list-files() {
  relativePath="$1"
  portNumber="$2"
  recursively=$4
  path="$Loc2Path"/"$relativePath"

  if [ $portNumber = 2 ]; then
    return
  fi

  fileType="$(get-file-type Loc2 "$path")"

  mindepth=0
  filePathFormat=f
  if [ "$fileType" = directory ]; then
    mindepth=1
    filePathFormat=P
  fi

  maxdepth=1
  if [ $recursively = 1 ]; then
    maxdepth=
  fi

  declare -a cmd=(find "$path" -mindepth "$mindepth" \
    ${maxdepth:+-maxdepth $maxdepth} \
    '!' -samefile "$Loc2Path"/"$TimestampFileName" \
    -printf '%y%'$filePathFormat'\0')
  execute-at-port Loc2 cmd | \
    sed -zr -e 's,^d(.*)$,\1/,
      t
      s,^.(.*)$,\1,'
}
