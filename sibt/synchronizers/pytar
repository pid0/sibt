#!python-runner
# This file is part of sibt (simple backup tool), a program that integrates existing backup tools.
# Copyright 2018 Patrick Plagwitz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import os
import tarfile

availableOptions = ["KeepCopies"]

class Archive(object):
  def __init__(path, metaFile):
    pass

def _findAllArchives(loc2):
  pass

def _cycleName(loc2, maximumNumber):
  filePath = os.path.join(loc2, "counter")

  counter = _readCounter(filePath)
  counter = (counter + 1) % maximumNumber
  _writeCounter(filePath, counter)

  return counter

def _readCounter(path):
  if not os.path.isfile(path):
    return -1

  with open(path, "r") as counterFile:
    return int(counterFile.read().strip())

def _writeCounter(path, counter):
  with open(path, "w") as counterFile:
    counterFile.write(str(counter))


def sync(loc1, loc2, keepCopies=2, **kwargs):
  counter = _cycleName(loc2, int(keepCopies))
  archiveName = "ar" + str(counter)

  os.chdir(loc1)
  with tarfile.open(os.path.join(loc2, archiveName), "w:xz") as tar:
    for loc1File in os.listdir("."):
      tar.add(loc1File, recursive=True)

def versionsOf(path, locNumber, loc1, loc2, **kwargs):
  if locNumber == 2:
    return []

#TODO 
# search through archives (with extra file "metan"): find all that contain path
# metan needs only the names (\0)
# print their mtimes
