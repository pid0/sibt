#!bash-runner
# This file is part of sibt (simple backup tool), a program that integrates existing backup tools.
# Copyright 2018 Patrick Plagwitz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


RemoteShellCommand=
Password=

available-options() {
  echo 'f ArchiveDir'
  echo KeyID
  echo 'f GPGHome'
  echo RemoteShellCommand
  echo Password
}

info-of-port() {
  if [ "$1" = specials ]; then
    return
  elif [ "$1" -lt 3 ]; then
    if [ "$1" = 1 ]; then
      echo 0
      echo file
    else
      echo 1
      echo file
      echo ssh
      echo dav
    fi
  fi
}

-run-duplicity() {
  if [ -n "${GPGHome:+${GPGHome}}" ]; then
    export GNUPGHOME="$GPGHome"
  fi

  declare -a encryptionOpts=()
  if [ -n "${KeyID:+${KeyID}}" ]; then
    encryptionOpts+=(--encrypt-sign-key "$KeyID")
    export PASSPHRASE=
  else
    encryptionOpts=(--no-encryption)
  fi

  declare -a sshOpts=()
  if [ -n "$RemoteShellCommand" ]; then
    sshOpts=(--ssh-options "$(echo "$RemoteShellCommand" | cut -d ' ' -f 2-)")
  fi

  export FTP_PASSWORD="$Password"

  duplicity \
    ${ArchiveDir:+--archive-dir "$ArchiveDir"} \
    "${encryptionOpts[@]}" "${sshOpts[@]}" "$@"
}

-loc-2-syntax() {
  local loc=Loc2
  local path="$(get-var $loc Path)"
  local protocol="$(get-var $loc Protocol)"

  if [ "$protocol" = file ]; then
    echo file://"$path"
    return
  fi

  [ "$protocol" = ssh ] && protocol=sftp
  [ "$protocol" = dav ] && protocol=webdav

  echo "$protocol"://"$(rsh-host-syntax-of $loc)"':'"$(get-var \
    $loc Port)"/"$path"
}

sync() {
  -run-duplicity "$Loc1" "$(-loc-2-syntax)"
}

-rewrite-date-time() {
  while read -r time; do
    local formatted=\
"${time:0:4}-${time:4:2}-${time:6:2}T${time:9:2}:${time:11:2}:${time:13:2}+0"
    date --utc --date "$formatted" '+%s'
  done
}

versions-of() {
  relativePath="$1"
  portNumber=$2

  if [ $portNumber = 2 ]; then
    return
  fi

  declare -a cmd=(-run-duplicity --log-fd 3 collection-status 
    "$(-loc-2-syntax)")

  fileRegex='^'"$(to-literal-sed-regex "$relativePath")"'/?$'

  { "${cmd[@]}"; } 3>&1 1>/dev/null | \
    sed -n '/^INFO 3/,/^\./ { /^ /p }' | \
    cut -d ' ' -f 3 | -rewrite-date-time | \
    while read -r version; do
      if [ "$relativePath" = . ]; then
        echo "$version"
        continue
      fi
      if -list-repo-tree "$version" | \
        grep --null-data -E "$fileRegex" >/dev/null; then
        echo "$version"
      fi
    done
}

-list-repo-tree() {
  declare -a cmd=(-run-duplicity --log-fd 3 list-current-files
    --time "$1"
    "$(-loc-2-syntax)")
  { "${cmd[@]}"; } 3>&1 1>/dev/null | -rewrite-file-listing
}

-get-repo-file-type() {
  local path="$1"
  local timestamp="$2"

  -list-repo-tree "$timestamp" | filter-file-type "$path"
}

list-files() {
  relativePath="$1"
  timestamp="${3%,*}"
  recursively=$4

  local commonPrefix="$relativePath"
  [ "$commonPrefix" = . ] && commonPrefix=''

  local childrenFilter=remove-non-top-level-paths
  [ "$recursively" = 1 ] && childrenFilter=cat

  -list-repo-tree "$timestamp" | to-children-of "$commonPrefix" | \
    "$childrenFilter"
}

-rewrite-file-listing() {
  local rootFolderLineEnding="'.' dir"
  local prefixLength=0

  while read -r line; do
    case "$line" in
      "INFO 10"*"$rootFolderLineEnding")
        read -r line
        prefixLength=$((${#line} - 1))
        break;;
    esac
  done

  local stripLeadingNewlines='2,$ { s/^\n// }'

  local appendSlash='
    x
    /dir$/ {
      x
      s,$,/,
      x
    }
    x'

  sed -r -n -e '
  /^INFO 10/ {
    h

    n
    s/^.{'"$prefixLength"'}//

    :appendAdditionalLine
    $! {
      N
      s/\n\. ([^\n]*)$/\n\1/
      T removeLastLine
      b appendAdditionalLine

      :removeLastLine
      s/\n[^\n]*$//
    }

    :print
    '"$appendSlash"'
    s/$/\x00/
    p
  }' | sed --zero-terminated -e "$stripLeadingNewlines"
}

-call-restore() {
  local relativePath="$1"
  local destPath="$2"
  local destPort="$3"
  local timestamp="$4"

  if [ "$relativePath" = . ]; then
    relativePath=''
  fi

  rm -rf "$destPath"
  -run-duplicity restore --time "$timestamp" \
    "$(-loc-2-syntax)" --file-to-restore "$relativePath" "$destPath"
}

restore() {
  rdiff-backup-like-restore -call-restore -get-repo-file-type "$@"
}
