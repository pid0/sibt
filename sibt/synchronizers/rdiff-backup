#!bash-runner

AdditionalSyncOpts=
RemoteShellCommand=ssh
ListFilesExactly=0

available-options() {
  echo t RemoveOlderThan
  echo AdditionalSyncOpts
  echo RemoteShellCommand
}

info-of-port() {
  if [ "$1" = specials ]; then
    return
  elif [ "$1" -lt 3 ]; then
    if [ "$1" = 1 ]; then
      echo 0
    else
      echo 1
    fi
    echo file
    echo ssh
  fi
}

loc-syntax-of() {
  local path="${2:-$(get-var $1 Path)}"

  if [ "$(get-var $1 Protocol)" = file ]; then
    echo "$path"
    return 
  fi

  echo "$(rsh-host-syntax-of $1)$(get-infixed-var ' -p ' $1 Port '')"'::'"$path"
}

run-rdiff-backup() {
  [ "$(get-var Loc1 Protocol)" = file ] && \
    [ "$(get-var Loc2 Protocol)" = file ] && \
    RemoteShellCommand=

  local remoteSchemaArg=\
"${RemoteShellCommand:+${RemoteShellCommand} -C %s rdiff-backup --server}"

  rdiff-backup ${remoteSchemaArg:+--remote-schema "$remoteSchemaArg"} "$@"
}

sync() {
  declare -a AdditionalArgs=()
  args-to-array AdditionalArgs "$AdditionalSyncOpts"

  run-rdiff-backup "${AdditionalArgs[@]:+${AdditionalArgs[@]}}" \
    "$(loc-syntax-of Loc1)" "$(loc-syntax-of Loc2)"

  if [ -n "${RemoveOlderThan:+a}" ]; then
    run-rdiff-backup --force "${AdditionalArgs[@]:+${AdditionalArgs[@]}}" \
      --remove-older-than "$RemoveOlderThan"s "$(loc-syntax-of Loc2)"
  fi

  incrementsFolder="$Loc2Path"/rdiff-backup-data
  restoreLogPath="$incrementsFolder"/restore.log
  declare -a incrementsChmod=(chmod -R g+rX,o+rX "$incrementsFolder")
  execute-at-port Loc2 incrementsChmod
  declare -a createRestoreLog=(touch -a "$restoreLogPath")
  execute-at-port Loc2 createRestoreLog
  declare -a chmodRestoreLog=(chmod g+w,o+w "$restoreLogPath")
  execute-at-port Loc2 chmodRestoreLog
}

versions-of() {
  path="$1"
  locNumber=$2

  if [ $locNumber = 2 ]; then
    return
  fi

  run-rdiff-backup --parsable-output --list-increments \
    "$(loc-syntax-of Loc2 "$Loc2Path"/"$path")" | \
    { grep -v missing || true; } | cut -d ' ' -f 1
}

-call-restore() {
  local relativePath="$1"
  local destPath="$2"
  local destPort="$3"
  local timestamp="$4"

  run-rdiff-backup --force --restore-as-of $timestamp \
    "$(loc-syntax-of Loc2 "$Loc2Path"/"$relativePath")" \
    "$(loc-syntax-of "$destPort" "$destPath")"
}

restore() {
  rdiff-backup-like-restore -call-restore -get-repo-file-type "$@"
}

-parse-repo-file-type() {
  local targetTimestamp="$1"
  local increment=
  while read -r increment; do
    local timestamp="${increment% *}"
    local fileType="${increment#* }"

    if [ "$timestamp" -ge "$targetTimestamp" ]; then
      echo "$fileType"
      return
    fi
  done
}

-get-repo-file-type() {
  run-rdiff-backup --parsable-output --list-increments \
    "$(loc-syntax-of Loc2 "$Loc2Path"/"$1")" | \
    -parse-repo-file-type "$2"
}

-append-slash-if-dir() {
  while read -r -d $'\0' fileName; do
    fileType=$(-get-repo-file-type "$fileName" $1)
    echo -n "$fileName"

    if [ $fileType = directory ]; then
      echo -n '/'
    fi

    echo -n -e '\0'
  done
}

-newline-to-null() {
  tr '\n' '\000'
}

-remove-prefix() {
  while read -r -d $'\0' word; do
    echo -n "${word:${#1}}"
    echo -n -e '\0'
  done
}

list-files() {
  relativePath="$1"
  timestamp="${3%,*}"
  recursively=$4

  typeOfFile=$(-get-repo-file-type "$relativePath" $timestamp)
  if [ $typeOfFile != directory ]; then
    echo -n "${relativePath##*/}"
    echo -e -n '\0'
    return
  fi

  #TODO refactor
  filterDirectChildren='\,^[^/]+/[^/]+/,!p'
  prependPeriodSlash='s,^,./,'

  filter="$filterDirectChildren"
  if [ $recursively = 1 ]; then
    filter='p'
  fi

  preprocessing=''
  prefix="$relativePath"/
  if [ "$relativePath" = . ]; then
    prefix=./
    preprocessing="$prependPeriodSlash"
  fi

  declare -a appendSlashProgram=(-append-slash-if-dir $timestamp)
  [ "$ListFilesExactly" = 0 ] && appendSlashProgram=(cat)

  run-rdiff-backup --list-at-time $timestamp \
    "$(loc-syntax-of Loc2 "$Loc2Path"/"$relativePath")" | sed -n -e '1!p' | \
    sed -r -e "$preprocessing" | sed -nr -e "$filter" | -newline-to-null | \
    "${appendSlashProgram[@]:+${appendSlashProgram[@]}}" | \
    -remove-prefix "$prefix"
}

check() {
  check-if-passable-as-argument AdditionalSyncOpts || true
  check-if-passable-as-argument RemoteShellCommand || true
}
