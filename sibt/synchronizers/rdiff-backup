#!bash-runner

AdditionalSyncOpts=
RemoteShellCommand=

available-options() {
  echo RemoveOlderThan
  echo AdditionalSyncOpts
  echo RemoteShellCommand
}

info-of-port() {
  if [ "$1" = specials ]; then
    return
  elif [ "$1" -lt 3 ]; then
    if [ "$1" = 1 ]; then
      echo 0
    else
      echo 1
    fi
    echo file
    echo ssh
  fi
}

loc-syntax-of() {
  local path="${2:-$(get-var $1 Path)}"

  if [ "$(get-var $1 Protocol)" = file ]; then
    echo "$path"
    return 
  fi

  echo "$(rsh-host-syntax-of $1)$(get-infixed-var ' -p ' $1 Port '')"'::'"$path"
}

run-rdiff-backup() {
  local remoteSchemaArg=\
"${RemoteShellCommand:+${RemoteShellCommand} -C %s rdiff-backup --server}"

  rdiff-backup ${remoteSchemaArg:+--remote-schema "$remoteSchemaArg"} "$@"
}

sync() {
  declare -a AdditionalArgs=()
  eval args-to-array AdditionalArgs "$AdditionalSyncOpts"

  run-rdiff-backup "${AdditionalArgs[@]:+${AdditionalArgs[@]}}" \
    "$(loc-syntax-of Loc1)" "$(loc-syntax-of Loc2)"

  if [ -n "${RemoveOlderThan+a}" ]; then
    run-rdiff-backup "${AdditionalArgs[@]:+${AdditionalArgs[@]}}" \
      --remove-older-than "$RemoveOlderThan" "$(loc-syntax-of Loc2)"
  fi
}

versions-of() {
  path="$1"
  locNumber=$2

  if [ $locNumber = 2 ]; then
    return
  fi

  run-rdiff-backup --parsable-output --list-increments \
    "$(loc-syntax-of Loc2 "$Loc2Path"/"$path")" | \
    { grep -v missing || true; } | cut -d ' ' -f 1
}

restore() {
  relativePath="$1"
  locNumber=$2
  timestamp=$3

  if [ $locNumber = 2 ]; then
    return
  fi

  srcFileType=$(get-repo-file-type "$relativePath" $timestamp)
  srcPath="$Loc2Path"/"$relativePath"
  srcFileName="$(basename "$srcPath")"

  restoringToSourceTree=0
  if [ -z "$4" ]; then
    restoringToSourceTree=1
    destPath="$Loc1Path"/"$relativePath"
    destPort=Loc1
  else
    destPath="$RestorePath"
    destPort=Restore
  fi
  destFileType=$(get-file-type Loc1 "$destPath" follow-links)

  fileInDest="$destPath"/"$srcFileName"
  fileInDestType=$(get-file-type Loc1 "$fileInDest")

  if [ $restoringToSourceTree = 0 ]; then
    if [ $destFileType = non-directory ]; then

      if [ $srcFileType = directory ]; then
        print-error "source is a directory; destination must be a directory, \
too"
        return 1
      fi

    elif [ $destFileType = directory ]; then
      destPath="$fileInDest"

      if [ $srcFileType = directory ] && \
          [ $fileInDestType = non-directory ]; then
        print-error "destination contains non-directory ‘$srcFileName’; "\
"could not make way for source"
        return 1
      fi

      if [ $srcFileType != directory ] && [ $fileInDestType = directory ]; then
        print-error "destination contains directory ‘$srcFileName’; "\
"could not make way for source"
        return 1
      fi

    fi
  fi

  run-rdiff-backup --force --restore-as-of $timestamp \
    "$(loc-syntax-of Loc2 "$srcPath")" \
    "$(loc-syntax-of "$destPort" "$destPath")"
}

get-repo-file-type() {
  run-rdiff-backup --parsable-output --list-increments \
    "$(loc-syntax-of Loc2 "$Loc2Path"/"$1")" | \
    sed -n -e "/^${2}/p" | cut -d ' ' -f 2
}

append-slash-if-dir() {
  while read fileName; do
    fileType=$(get-repo-file-type "$fileName" $1)
    echo -n "$fileName"

    if [ $fileType = directory ]; then
      echo -n '/'
    fi

    echo -n -e '\0'
  done
}

remove-prefix() {
  while read -d $'\0' word; do
    echo -n "${word:${#1}:${#word}}"
    echo -n -e '\0'
  done
}

list-files() {
  relativePath="$1"
  locNumber=$2
  timestamp=$3
  recursively=$4

  if [ $locNumber = 2 ]; then
    return
  fi

  typeOfFile=$(get-repo-file-type "$relativePath" $timestamp)
  if [ $typeOfFile != directory ]; then
    echo -n "${relativePath##*/}"
    echo -e -n '\0'
    return
  fi

  filterDirectChildren='\,^[^/]+/[^/]+/,!p'
  prependPeriodSlash='s,^,./,'

  filter="$filterDirectChildren"
  if [ $recursively = 1 ]; then
    filter='p'
  fi

  preprocessing=''
  prefix="$relativePath"/
  if [ "$relativePath" = . ]; then
    prefix=./
    preprocessing="$prependPeriodSlash"
  fi

  run-rdiff-backup --list-at-time $timestamp \
    "$(loc-syntax-of Loc2 "$Loc2Path"/"$relativePath")" | sed -n -e '1!p' | \
    sed -r -e "$preprocessing" | sed -nr -e "$filter" | \
    append-slash-if-dir $timestamp | remove-prefix "$prefix"
}
