from sibt.infrastructure.coprocessrunner import CoprocessRunner
from sibt.infrastructure.currenttimeclock import CurrentTimeClock
import os
import tempfile
from contextlib import contextmanager
import functools
import shlex
import subprocess
import re
from datetime import timedelta, datetime, timezone, time
from sibt.infrastructure.timerange import timeRange, fullTimeRange
from sibt.infrastructure.timehelper import toUTC

availableSharedOptions = ["s AllowedHours", "f TmpDir"]
availableOptions = ["t Interval"]

CommonFileNamePrefix = "sibt-anacron-"
TabPrefix = CommonFileNamePrefix + "tab-"
AllowedHoursRegex = re.compile("([0-9]+)-([0-9]+)")
SecondsInADay = 86400

def quoted(string):
  return shlex.quote(string)

def quotedOpt(options, optionKey):
  string = str(options.get(optionKey, ""))
  return quoted(string)

class Anacron(object):
  def init(self, args):
    self.processRunner = CoprocessRunner()
    self.sibtCall = args.sibtInvocation
    self.varDir = args.varDir
    self.logger = args.logger
    self.clock = CurrentTimeClock()
    self.spoolDir = os.path.join(self.varDir, "spool")
    if not os.path.isdir(self.spoolDir):
      os.mkdir(self.spoolDir)

  def getIntervalInDays(self, scheduling, warn=False):
    interval = scheduling.options.get("Interval", timedelta(days=3))
    days = int(interval / timedelta(seconds=1)) / SecondsInADay
    roundedDays = round(days)
    if days != roundedDays and warn:
      self.logger.log("warning: rounding interval of ‘{0}’ to days ({1})",
          scheduling.ruleName, roundedDays)
    return int(roundedDays)

  def schedule(self, schedulings):
    tmpDir = str(schedulings.getSharedOption("TmpDir", tempfile.gettempdir()))

    with writeAndCloseTemporaryFile(tmpDir, TabPrefix, functools.partial(
        self.writeTabFile, schedulings)) as tabPath:
      self.processRunner.execute("anacron", "-t", tabPath,
          "-S", self.spoolDir, "-d")

  def writeTabFile(self, schedulings, tabFile):
    allowedHours = schedulings.getSharedOption("AllowedHours", None)
    if allowedHours is not None:
      tabFile.write("START_HOURS_RANGE={0}".format(allowedHours) + "\n")

    for scheduling in schedulings:
      self.writeTabEntry(tabFile, scheduling)

  def check(self, schedulings):
    ret = []
    ret.extend(schedulings.checkOptionsOfEach(self.checkAllowedHours, 
      "AllowedHours"))

    for scheduling in schedulings:
      self.getIntervalInDays(scheduling, warn=True)

    return ret

  def checkAllowedHours(self, _, setting, ruleName):
    try:
      self.parseAllowedHours(setting)
    except ValueError as ex:
      return "Syntax error in AllowedHours setting of ‘{0}’ (‘{1}’): {2}".\
          format(ruleName, setting, str(ex))

  def parseAllowedHours(self, string):
    regexMatch = AllowedHoursRegex.fullmatch(string)
    if regexMatch is None:
      raise ValueError("Must be of the form <start hour>-<end hour>")

    startHour = int(regexMatch.group(1))
    exclusiveEndHour = int(regexMatch.group(2))
    if startHour >= exclusiveEndHour:
      raise ValueError("Start hour must be smaller than end hour")

    end = time.max if exclusiveEndHour == 24 else time(exclusiveEndHour, 0)
    return timeRange(time(startHour, 0), end)

  def writeTabEntry(self, tabFile, scheduling):
    fields = [
        str(self.getIntervalInDays(scheduling, warn=True)),
        "0", 
        scheduling.ruleName]
    fields += [quoted(word) for word in self.sibtCall]
    fields += ["execute-rule", "--", quoted(scheduling.ruleName)]

    for field in fields:
      tabFile.write(field)
      tabFile.write(" ")

    tabFile.write("\n")

  def nextExecutionTime(self, scheduling, lastTime):
    interval = timedelta(days=self.getIntervalInDays(scheduling))
    allowedHours = fullTimeRange()
    if "AllowedHours" in scheduling.options:
      allowedHours = self.parseAllowedHours(scheduling.options["AllowedHours"])

    return toUTC(self.nextExecutionLocalTime(self.clock, interval, allowedHours,
      lastTime))

  def nextExecutionLocalTime(self, clock, interval, allowedHours, 
      lastTimeInUTC):
    now = clock.now().astimezone()
    ret = now
    if lastTimeInUTC is not None:
      ret = self.advancedByInterval(now, interval, lastTimeInUTC.astimezone())

    return self.allowedHoursAdjusted(allowedHours, ret)

  def advancedByInterval(self, now, interval, lastTimeInLocalTime):
    exactTime = lastTimeInLocalTime + interval
    midnight = withoutTimeOfDay(exactTime)

    if midnight <= now:
      return now
    return midnight
  
  def allowedHoursAdjusted(self, allowedHours, localTime):
    if localTime.time() in allowedHours:
      return localTime

    ret = withoutTimeOfDay(localTime).replace(hour=allowedHours.start.hour)
    if localTime.time() < allowedHours.start:
      return ret
    else:
      return ret + timedelta(days=1)

def withoutTimeOfDay(dateTime):
  return datetime(dateTime.year, dateTime.month, dateTime.day, 0, 0, 0, 0, 
      dateTime.tzinfo)

@contextmanager
def writeAndCloseTemporaryFile(tmpDir, prefix, writeFunc):
  fd, name = tempfile.mkstemp(dir=tmpDir, prefix=prefix)
  try:
    path = os.path.join(tmpDir, name)
    with os.fdopen(fd, "w+") as tmpFile:
      writeFunc(tmpFile)

    yield path
  finally:
    os.unlink(path)

impl = Anacron()

def init(*args):
  global impl
  impl.init(*args)
def schedule(*args):
  global impl
  impl.schedule(*args)
def check(*args):
  global impl
  return impl.check(*args)
def nextExecutionTime(*args):
  global impl
  return impl.nextExecutionTime(*args)
