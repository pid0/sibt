#!/usr/bin/env bash

set -e
set -u
set -o pipefail

notImplStatus=200

fileToRun="$1"
shift 1
action="$1"
shift 1

#####
# Default implementations
#####
info-of-port() {
  return $notImplStatus
}

available-options() {
  return $notImplStatus
}

restore() {
  return $notImplStatus
}

list-files() {
  return $notImplStatus
}

versions-of() {
  return $notImplStatus
}

sync() {
  return $notImplStatus
}

check() {
  return $notImplStatus
}

#####
# Library
#####
get-file-type() {
  local followLinks=${3:-0}

  declare -a cmd=(bash -c \
 'if ! [ -e "$1" ]; then
    echo missing
  elif [ -d "$1" ] && ( [ "$2" = follow-links ] || ! [ -L "$1" ] ); then
    echo directory
  else
    echo non-directory
  fi' "" "$2" "$followLinks")
  execute-at-port "$1" cmd
}

eval-args-into-array() {
  declare -n destArray=$1

  destArray=("${@:2:$#}")
}
args-to-array() {
  eval eval-args-into-array "$1" "${2//$'\n'/ }"
}

get-var() {
  local fullVarName="$1""$2"
  echo "${!fullVarName}"
}

get-optional-var() {
  local fullVarName="$1""$2"
  echo "${!fullVarName:+${!fullVarName}}"
}

get-infixed-var() {
  local fullVarName="$2""$3"
  echo "${!fullVarName:+"$1${!fullVarName}$4"}"
}

rsh-command-with-socket-port() {
  echo "${RemoteShellCommand:-ssh} ${1:+-p $1}"
}

rsh-host-syntax-of() {
  echo "$(get-infixed-var '' $1 Login '@')""$(get-var $1 Host)"
}

execute-at-port() {
  local argsArrayName="$2"[@]

  if [ "$(get-var $1 Protocol)" = file ]; then
    "${!argsArrayName}"
  else
    declare -a rshCommand=(\
      $(rsh-command-with-socket-port "$(get-optional-var $1 Port)"))
    rshCommand+=("$(rsh-host-syntax-of $1)" "")
    for arg in "${!argsArrayName}"; do
      local argWithSingleQuotesEscaped="$(echo "$arg" | \
        sed -r -e "s,','\"'\"',g")"
      rshCommand[-1]+="'${argWithSingleQuotesEscaped}' "
    done
    "${rshCommand[@]}"
  fi
}

get-first-rsh-port() {
  for portLocName in "$@"; do
    local socketPort="$(get-optional-var "$portLocName" Port)"
    if ! [ "$(get-var "$portLocName" Protocol)" = file ]; then
      echo "$socketPort"
      return
    fi
  done
}

print-error() {
  echo "$(basename "$fileToRun")"' synchronizer:' "$@" >&2
}


make-assertion-about-option() {
  if ! "${@:2}"; then
    echo -n ' ('in option ‘"$1"’')'
    echo -n -e '\0'
    return 1
  fi

  return 0
}
try-to-echo() {
  "$BASH" -n -c 'echo '"$1" 2>&1 | sed -r -e 's/^.+line [0-9]+: //'
}
assert-each-is-absolute() {
  declare -a paths
  args-to-array paths "$1"

  for path in "${paths[@]:+${paths[@]}}"; do
    if [ "${path:0:1}" != / ]; then
      echo -n "$path" should be an absolute path
      return 1
    fi
  done
}
assert-excluded-dirs-are-absolute() {
  make-assertion-about-option ExcludedDirs assert-each-is-absolute \
    "$ExcludedDirs"
}
check-if-passable-as-argument() {
  declare -n optionValue="$1"
  make-assertion-about-option "$1" try-to-echo "$optionValue"
}

starts-with-path() {
  local originalPath="$1"
  local prefix="$2"
  local prefixRemoved="${1#"${prefix}"}"

  if [ "$originalPath" = "$prefix" ]; then
    return 0
  fi

  if [ "$prefixRemoved" = "$originalPath" ]; then
    return 1
  fi
  if [ "${prefixRemoved:0:1}" != / ]; then
    return 1
  fi
  return 0
}

get-normalized-exclude-dirs() {
  declare -n destArray="$1"

  declare -a optionWords=()
  args-to-array optionWords "$ExcludedDirs"

  for optionWord in "${optionWords[@]:+${optionWords[@]}}"; do 
    local normalizedExcludePath="$(echo "$optionWord" | \
        sed -r -e 's,/+,/,g; s,/\./,/,g; s,/$,,')"
    destArray+=("$normalizedExcludePath")
  done
}

to-literal-sed-regex() {
  local ret=
  for((i = 0; i < "${#1}"; ++i)); do
    local char="${1:$i:1}"
    [ "$char" = $'\n' ] && char='\n'
    ret+="[${char}]"
  done

  echo "$ret"
}

to-children-of() {
  local prefix="$1"
  if [ -z "$prefix" ]; then
    cat
    return
  fi
  [ "${prefix: -1}" != / ] && prefix+=/

  local prefixRegex="$(to-literal-sed-regex "$prefix")"
  local prefixRegexWithoutSlash="${prefixRegex:0:-3}"

  sed --zero-terminated -r -n -e '
  s/^'"$prefixRegex"'//
  T notAChild
  /^$/ {
    d
  }
  p

  :notAChild
  /^'"$prefixRegexWithoutSlash"'$/ {
    s,^.*/,,
    p
  }'
}

remove-non-top-level-paths() {
  sed --zero-terminated -r -e '
  \,/.+$, {
    d
  }'
}

filter-file-type() {
  local regex="$(to-literal-sed-regex "$1")"
  local match="$(sed -r -n --zero-terminated '/^'"$regex"'\/?$/p')"

  case "$match" in
    '')
      echo missing;;
    */)
      echo directory;;
    *)
      echo non-directory;;
  esac
}

ignore-signals() {
  trap '' INT TERM
}
restore-signals() {
  trap - INT TERM
}

rdiff-backup-like-restore() {
  writeFunc="$1"
  getRepoFileType="$2"
  shift 2

  relativePath="$1"
  locNumber=$2
  timestamp="${3%,*}"

  if [ $locNumber = 2 ]; then
    return
  fi

  srcFileType=$("$getRepoFileType" "$relativePath" $timestamp)
  srcFileName="$(basename -- "$relativePath")"

  restoringToSourceTree=0
  if [ -z "$4" ]; then
    restoringToSourceTree=1
    destPath="$Loc1Path"
    [ "$relativePath" != . ] && destPath="$Loc1Path"/"$relativePath"
    destPort=Loc1
  else
    destPath="$RestorePath"
    destPort=Restore
  fi
  destFileType=$(get-file-type "$destPort" "$destPath" follow-links)

  fileInDest="$destPath"/"$srcFileName"
  fileInDestType=$(get-file-type "$destPort" "$fileInDest")

  if [ $restoringToSourceTree = 0 ]; then
    if [ $destFileType = non-directory ]; then

      if [ $srcFileType = directory ]; then
        print-error "source is a directory; destination must be a directory, \
too"
        return 1
      fi

    elif [ $destFileType = directory ]; then
      destPath="$fileInDest"

      if [ $srcFileType = directory ] && \
          [ $fileInDestType = non-directory ]; then
        print-error "destination contains non-directory ‘$srcFileName’; "\
"could not make way for source"
        return 1
      fi

      if [ $srcFileType != directory ] && [ $fileInDestType = directory ]; then
        print-error "destination contains directory ‘$srcFileName’; "\
"could not make way for source"
        return 1
      fi

    fi
  fi

  "$writeFunc" "$relativePath" "$destPath" "$destPort" "$timestamp"
}

#####
# Invocation
#####
source "$fileToRun"

setup-variables() {
  for varAssignment in "$@"; do
    local varName="${varAssignment%%=*}"
    local varValue="${varAssignment#*=}"
    declare -n variable="$varName"
    variable="$varValue"
  done
}

case $action in
  available-options) available-options;;
  sync) setup-variables "${@:1}"; sync;;
  versions-of) setup-variables "${@:3}"; versions-of "$@";;
  restore) setup-variables "${@:5}"; restore "$@";;
  list-files) setup-variables "${@:5}"; list-files "$@";;
  info-of-port) info-of-port "$@";;
  check) setup-variables "${@:1}"; check;;
esac

