#!/usr/bin/env bash

set -e
set -u
set -o pipefail

notImplStatus=200

fileToRun="$1"
shift 1
action="$1"
shift 1

#####
# Default implementations
#####
info-of-port() {
  return $notImplStatus
}

available-options() {
  return $notImplStatus
}

restore() {
  return $notImplStatus
}

list-files() {
  return $notImplStatus
}

versions-of() {
  return $notImplStatus
}

sync() {
  return $notImplStatus
}

#####
# Library
#####
get-file-type() {
  local followLinks=${3:-0}

  declare -a cmd=(bash -c \
 'if ! [ -e "$1" ]; then
    echo missing
  elif [ -d "$1" ] && ( [ "$2" = follow-links ] || ! [ -L "$1" ] ); then
    echo directory
  else
    echo non-directory
  fi' "" "$2" "$followLinks")
  execute-at-port "$1" cmd
}

args-to-array() {
  declare -n destArray=$1

  destArray=("${@:2:$#}")
}

get-var() {
  local fullVarName="$1""$2"
  echo "${!fullVarName}"
}

get-optional-var() {
  local fullVarName="$1""$2"
  echo "${!fullVarName:+${!fullVarName}}"
}

get-infixed-var() {
  local fullVarName="$2""$3"
  echo "${!fullVarName:+"$1${!fullVarName}$4"}"
}

rsh-command-with-socket-port() {
  echo "${RemoteShellCommand:-ssh} ${1:+-p $1}"
}

rsh-host-syntax-of() {
  echo "$(get-infixed-var '' $1 Login '@')""$(get-var $1 Host)"
}

execute-at-port() {
  local argsArrayName="$2"[@]

  if [ "$(get-var $1 Protocol)" = file ]; then
    "${!argsArrayName}"
  else
    declare -a rshCommand=(\
      $(rsh-command-with-socket-port "$(get-optional-var $1 Port)"))
    rshCommand+=("$(rsh-host-syntax-of $1)" "")
    for arg in "${!argsArrayName}"; do
      local argWithSingleQuotesEscaped="$(echo "$arg" | \
        sed -r -e "s,','\"'\"',g")"
      rshCommand[-1]+="'${argWithSingleQuotesEscaped}' "
    done
    "${rshCommand[@]}"
  fi
}

get-first-rsh-port() {
  for portLocName in "$@"; do
    local socketPort="$(get-optional-var "$portLocName" Port)"
    if ! [ "$(get-var "$portLocName" Protocol)" = file ]; then
      echo "$socketPort"
      return
    fi
  done
}

print-error() {
  echo "$(basename "$fileToRun")"' synchronizer:' "$@" >&2
}

#####
# Invocation
#####
source "$fileToRun"

setup-variables() {
  for varAssignment in "$@"; do
    local varName="${varAssignment%%=*}"
    local varValue="${varAssignment#*=}"
    declare -n variable="$varName"
    variable="$varValue"
  done
}

case $action in
  available-options) available-options;;
  sync) setup-variables "${@:1:$#}"; sync;;
  versions-of) setup-variables "${@:3:$#}"; versions-of "$@";;
  restore) setup-variables "${@:6:$#}"; restore "$@";;
  list-files) setup-variables "${@:6:$#}"; list-files "$@";;
  info-of-port) info-of-port "$@";;
esac

