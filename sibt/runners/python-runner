#!/usr/bin/env python
# This file is part of sibt (simple backup tool), a program that integrates existing backup tools.
# Copyright 2018 Patrick Plagwitz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from sibt.infrastructure.pymoduleloader import PyModuleLoader
import sys
import os
import itertools
from subprocess import CalledProcessError

NumberOfPositionalArgs = { "availableOptions": 0,
    "sync": 0,
    "versionsOf": 2,
    "restore": 4,
    "listFiles": 4,
    "infoOfPort": 1,
    "check": 0 }

def parseKeyValuePairs(pairs):
  def parsePair(string):
    equalsSign = string.index("=")
    key = string[0:equalsSign]
    key = key[0].lower() + key[1:]
    return (key, string[equalsSign+1:])

  return dict(parsePair(string) for string in pairs)

def transformActionName(name):
  words = []
  for isDash, group in itertools.groupby(name, lambda char: True if 
      char == "-" else False):
    if not isDash:
      word = list(group)
      if len(words) > 0:
        word = word[0].upper() + "".join(word[1:])
      else:
        word = "".join(word)
      words.append(word)

  return "".join(words)

def getMember(mod, name):
  return getattr(mod, name) if hasattr(mod, name) else NotImplemented

def printOutput(lines):
  for line in lines:
    print(line)

if __name__ == "__main__":
  loader = PyModuleLoader("synchronizersnamespace")
  mod = loader.loadFromFile(sys.argv[1], os.path.basename(sys.argv[1]))

  action = transformActionName(sys.argv[2])
  numberOfPositionals = NumberOfPositionalArgs[action]
  positionals = sys.argv[3:3+numberOfPositionals]
  options = parseKeyValuePairs(sys.argv[3+numberOfPositionals:])

  member = getMember(mod, action)
  if member is NotImplemented:
    sys.exit(200)

  try:
    if action in ["availableOptions", "writesTo"]:
      printOutput(member)
    elif action == "versionsOf":
      printOutput(member(**options))
    else:
      member(**options)
  except CalledProcessError as ex:
    sys.exit(ex.returncode)

